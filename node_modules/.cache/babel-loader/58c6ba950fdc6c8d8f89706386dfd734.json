{"ast":null,"code":"import _classCallCheck from \"/Users/russellscharf/Desktop/twitch-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/russellscharf/Desktop/twitch-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/russellscharf/Desktop/twitch-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/russellscharf/Desktop/twitch-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/russellscharf/Desktop/twitch-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/russellscharf/Desktop/twitch-app/src/App.js\";\nimport React, { Component } from \"react\";\nimport \"./App.css\";\nimport { Button } from \"react-bootstrap\";\nimport Header from \"./MyHeader\";\nimport SearchBar from \"./MySearchBar\";\nimport Stream from \"./MyStream\"; // import Background from \"./MyBackground\";\n\nvar APIid = \"2x21yf8b7p6a6z6agpbc4cdsf0cy8d\";\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this));\n    _this.state = {\n      loading: false,\n      info: {}\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.setState({\n        loading: true\n      });\n\n      var test_access_token = function test_access_token() {\n        fetch(\"https://api.twitch.tv/kraken/streams/\", {\n          headers: {\n            \"Client-Id\": APIid\n          }\n        }).then(function (response) {\n          return response.json();\n        }).then(function (data) {\n          _this2.setState({\n            info: data\n          });\n\n          console.log(\"response: \", data);\n          console.log(\"Index zero: \", data.streams[0].game);\n        });\n      };\n\n      test_access_token();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"box\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }, React.createElement(Header, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }), React.createElement(SearchBar, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, this.state.info.game), React.createElement(Stream, {\n        stream: {\n          image: \"test\",\n          name: \"test\",\n          game: \"test\",\n          viewers: \"test\",\n          description: \"test\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }), React.createElement(Button, {\n        bsstyle: \"success\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, \"Test\"));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App; // The stream needs to be passed attributes\n// <Stream\n//    stream={{image:\"\" name:\"\" game:\"\" viewers:\"\" description:\"\"}}\n// />\n// Info above is usually coming from a JSON file, so passing it as a single prop (in this case \"stream\") is useful\n// Take an array of raw data and turn it into a number of components (1:41 in video)\n// const nums = [1, 2, 3, 4, 5]\n// const doubled = nums.map(function(num) {      function receives each individual number in the array\n//  return num*2                                  map function creates new array\n// })\n// streamData.js is a file\n// function App {\n// const streamComponents = streamData.map(stream => {      // returns an array of stream components\n//   return (\n//    <Stream key={stream.id} image={stream.image} name={stream.name} game={stream.game} viewers={stream.viewers} description={stream.description}/>\n//   )\n// })\n//\n// return (\n//   <div>\n//     {streamComponents}\n//   </div>\n// )\n// export default App","map":{"version":3,"sources":["/Users/russellscharf/Desktop/twitch-app/src/App.js"],"names":["React","Component","Button","Header","SearchBar","Stream","APIid","App","state","loading","info","setState","test_access_token","fetch","headers","then","response","json","data","console","log","streams","game","image","name","viewers","description"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,WAAP;AACA,SAASC,MAAT,QAAuB,iBAAvB;AAEA,OAAOC,MAAP,MAAmB,YAAnB;AACA,OAAOC,SAAP,MAAsB,eAAtB;AACA,OAAOC,MAAP,MAAmB,YAAnB,C,CACA;;AACA,IAAIC,KAAK,GAAG,gCAAZ;;IAEMC,G;;;;;AACJ,iBAAc;AAAA;;AAAA;;AACZ;AACA,UAAKC,KAAL,GAAa;AACXC,MAAAA,OAAO,EAAE,KADE;AAEXC,MAAAA,IAAI,EAAE;AAFK,KAAb;AAFY;AAMb;;;;wCAEmB;AAAA;;AAClB,WAAKC,QAAL,CAAc;AAAEF,QAAAA,OAAO,EAAE;AAAX,OAAd;;AACA,UAAMG,iBAAiB,GAAG,SAApBA,iBAAoB,GAAM;AAC9BC,QAAAA,KAAK,CAAC,uCAAD,EAA0C;AAC7CC,UAAAA,OAAO,EAAE;AACP,yBAAaR;AADN;AADoC,SAA1C,CAAL,CAKGS,IALH,CAKQ,UAAAC,QAAQ;AAAA,iBAAIA,QAAQ,CAACC,IAAT,EAAJ;AAAA,SALhB,EAMGF,IANH,CAMQ,UAAAG,IAAI,EAAI;AACZ,UAAA,MAAI,CAACP,QAAL,CAAc;AACZD,YAAAA,IAAI,EAAEQ;AADM,WAAd;;AAGAC,UAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BF,IAA1B;AACAC,UAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BF,IAAI,CAACG,OAAL,CAAa,CAAb,EAAgBC,IAA5C;AACD,SAZH;AAaD,OAdD;;AAeAV,MAAAA,iBAAiB;AAClB;;;6BAEQ;AACP,aACE;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAEE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAI,KAAKJ,KAAL,CAAWE,IAAX,CAAgBY,IAApB,CAHF,EAIE,oBAAC,MAAD;AACE,QAAA,MAAM,EAAE;AACNC,UAAAA,KAAK,EAAE,MADD;AAENC,UAAAA,IAAI,EAAE,MAFA;AAGNF,UAAAA,IAAI,EAAE,MAHA;AAING,UAAAA,OAAO,EAAE,MAJH;AAKNC,UAAAA,WAAW,EAAE;AALP,SADV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJF,EAaE,oBAAC,MAAD;AAAQ,QAAA,OAAO,EAAC,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAbF,CADF;AAiBD;;;;EA/CezB,S;;AAkDlB,eAAeM,GAAf,C,CAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { Button } from \"react-bootstrap\";\n\nimport Header from \"./MyHeader\";\nimport SearchBar from \"./MySearchBar\";\nimport Stream from \"./MyStream\";\n// import Background from \"./MyBackground\";\nvar APIid = \"2x21yf8b7p6a6z6agpbc4cdsf0cy8d\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      loading: false,\n      info: {}\n    };\n  }\n\n  componentDidMount() {\n    this.setState({ loading: true });\n    const test_access_token = () => {\n      fetch(\"https://api.twitch.tv/kraken/streams/\", {\n        headers: {\n          \"Client-Id\": APIid\n        }\n      })\n        .then(response => response.json())\n        .then(data => {\n          this.setState({\n            info: data\n          });\n          console.log(\"response: \", data);\n          console.log(\"Index zero: \", data.streams[0].game);\n        });\n    };\n    test_access_token();\n  }\n\n  render() {\n    return (\n      <div className=\"box\">\n        <Header />\n        <SearchBar />\n        <p>{this.state.info.game}</p>\n        <Stream\n          stream={{\n            image: \"test\",\n            name: \"test\",\n            game: \"test\",\n            viewers: \"test\",\n            description: \"test\"\n          }}\n        />\n        <Button bsstyle=\"success\">Test</Button>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n// The stream needs to be passed attributes\n// <Stream\n//    stream={{image:\"\" name:\"\" game:\"\" viewers:\"\" description:\"\"}}\n// />\n\n// Info above is usually coming from a JSON file, so passing it as a single prop (in this case \"stream\") is useful\n\n// Take an array of raw data and turn it into a number of components (1:41 in video)\n// const nums = [1, 2, 3, 4, 5]\n// const doubled = nums.map(function(num) {      function receives each individual number in the array\n//  return num*2                                  map function creates new array\n// })\n\n// streamData.js is a file\n// function App {\n// const streamComponents = streamData.map(stream => {      // returns an array of stream components\n//   return (\n//    <Stream key={stream.id} image={stream.image} name={stream.name} game={stream.game} viewers={stream.viewers} description={stream.description}/>\n//   )\n// })\n//\n// return (\n//   <div>\n//     {streamComponents}\n//   </div>\n// )\n// export default App\n"]},"metadata":{},"sourceType":"module"}