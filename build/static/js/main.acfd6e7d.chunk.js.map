{"version":3,"sources":["MyHeader.js","MySearchBar.js","MyStream.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","SearchBar","type","placeholder","Stream","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","items","loading","_this2","setState","fetch","headers","Client-Id","then","res","json","streams","console","log","game","_this$state","className","MyHeader","MySearchBar","map","item","src","channel","logo","alt","display_name","viewers","status","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+NAMeA,MAJf,WACE,OAAOC,EAAAC,EAAAC,cAAA,+BCOMC,MARf,WACE,OACEH,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SAAOE,KAAK,OAAOC,YAAY,eCatBC,IC0EAC,cAjFb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,MAAO,GACPC,SAAS,GAJMT,mFAQC,IAAAU,EAAAP,KAClBA,KAAKQ,SAAS,CAAEF,SAAS,IAEvBG,MAAM,wCAAyC,CAC7CC,QAAS,CACPC,YAjBE,oCAoBHC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAE,GACJP,EAAKC,SAAS,CACZH,MAAOS,EAAKC,QACZT,SAAS,IAEXU,QAAQC,IAAI,kBAAmBH,GAC/BE,QAAQC,IAAI,wBAAyBV,EAAKH,OAC1CY,QAAQC,IAAI,oBAAqBH,EAAKC,QAAQ,GAAGG,MACjDF,QAAQC,IAAI,oBAAqBV,EAAKH,MAAMC,MAAM,GAAGa,MACrDF,QAAQC,IAAIV,EAAKH,MAAMC,MAAM,uCAM5B,IAAAc,EACkBnB,KAAKI,MAAxBE,EADCa,EACDb,QADCa,EACQd,MACf,OAAIC,EACKlB,EAAAC,EAAAC,cAAA,yBAGLF,EAAAC,EAAAC,cAAA,OAAK8B,UAAU,OACbhC,EAAAC,EAAAC,cAAC+B,EAAD,MACAjC,EAAAC,EAAAC,cAACgC,EAAD,MACAlC,EAAAC,EAAAC,cAAA,WACGU,KAAKI,MAAMC,MAAMkB,IAAI,SAAAC,GAAI,OACxBpC,EAAAC,EAAAC,cAAA,OAAK8B,UAAU,oBACbhC,EAAAC,EAAAC,cAAA,OAAK8B,UAAU,OACbhC,EAAAC,EAAAC,cAAA,OAAK8B,UAAU,yBACbhC,EAAAC,EAAAC,cAAA,OAAKmC,IAAKD,EAAKE,QAAQC,KAAMC,IAAI,MAEnCxC,EAAAC,EAAAC,cAAA,OAAK8B,UAAU,wBACbhC,EAAAC,EAAAC,cAAA,MAAI8B,UAAU,QAAQI,EAAKE,QAAQG,cACnCzC,EAAAC,EAAAC,cAAA,KAAG8B,UAAU,QAAQI,EAAKN,MAC1B9B,EAAAC,EAAAC,cAAA,KAAG8B,UAAU,WAAb,YAAiCI,EAAKM,SACtC1C,EAAAC,EAAAC,cAAA,KAAG8B,UAAU,eAAeI,EAAKE,QAAQK,sBArD3CC,aCEEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnD,EAAAC,EAAAC,cAACkD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjC,KAAK,SAAAkC,GACjCA,EAAaC","file":"static/js/main.acfd6e7d.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Header() {\n  return <h2>Twitch Dashboard</h2>;\n}\n\nexport default Header;\n","import React from \"react\";\n\nfunction SearchBar() {\n  return (\n    <div>\n      <input type=\"text\" placeholder=\"Search..\" />\n    </div>\n  );\n}\n\nexport default SearchBar;\n","import React from \"react\";\n\nfunction Stream(props) {\n  return (\n    <div className=\"stream container\">\n      <div className=\"row\">\n        <div className=\"stream-image col-sm-3\">picture goes here</div>\n        <div className=\"stream-info col-sm-7\">\n          <h5 className=\"name\">Test</h5>\n          <p className=\"game\">{props.stream.game}</p>\n          <p className=\"viewers\">Number of viewers</p>\n          <p className=\"description\">Description</p>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Stream;\n\n// function Stream(props) {\n// return (\n//     <div className=\"stream container\">\n//         <div className=\"row\">\n//             <div className=\"stream-image col-sm-3\"><img src={props.stream.image}/></div>\n//             <div className=\"stream-info col-sm-3\">\n//                 <h5 className=\"name\">{props.stream.name}</h5>\n//                 <p className=\"game\">{props.stream.game}</p>\n//                 <p className=\"viewers\">{props.stream.viewers}</p>\n//                 <p className=\"description\">{props.stream.description}</p>\n//             </div>\n//         </div>\n//     </div>\n// );\n// }\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { Button } from \"react-bootstrap\";\n\nimport Header from \"./MyHeader\";\nimport SearchBar from \"./MySearchBar\";\nimport Stream from \"./MyStream\";\nvar APIid = \"2x21yf8b7p6a6z6agpbc4cdsf0cy8d\";\nvar myStreams = [];\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      items: [],\n      loading: false\n    };\n  }\n\n  componentDidMount() {\n    this.setState({ loading: true });\n    const test_access_token = () => {\n      fetch(\"https://api.twitch.tv/kraken/streams/\", {\n        headers: {\n          \"Client-Id\": APIid\n        }\n      })\n        .then(res => res.json())\n        .then(json => {\n          this.setState({\n            items: json.streams,\n            loading: false\n          });\n          console.log(\"json response: \", json);\n          console.log(\"this.state response: \", this.state);\n          console.log(\"Index zero game: \", json.streams[0].game);\n          console.log(\"Index zero game: \", this.state.items[0].game);\n          console.log(this.state.items[2]);\n        });\n    };\n    test_access_token();\n  }\n\n  render() {\n    var { loading, items } = this.state;\n    if (loading) {\n      return <div>Loading...</div>;\n    } else {\n      return (\n        <div className=\"box\">\n          <Header />\n          <SearchBar />\n          <div>\n            {this.state.items.map(item => (\n              <div className=\"stream container\">\n                <div className=\"row\">\n                  <div className=\"stream-image col-sm-4\">\n                    <img src={item.channel.logo} alt=\"\" />\n                  </div>\n                  <div className=\"stream-info col-sm-7\">\n                    <h5 className=\"name\">{item.channel.display_name}</h5>\n                    <p className=\"game\">{item.game}</p>\n                    <p className=\"viewers\">Viewers: {item.viewers}</p>\n                    <p className=\"description\">{item.channel.status}</p>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      );\n      // return (\n      //   <div className=\"box\">\n      //     <Header />\n      //     <SearchBar />\n      //     {myStreams}\n      //     <Stream\n      //       stream={{\n      //         image: \"test\",\n      //         name: \"test\",\n      //         game: \"Fort\",\n      //         viewers: \"5\",\n      //         description: \"test\"\n      //       }}\n      //     />\n      //     <Button bsstyle=\"success\">Test Button</Button>\n      //   </div>\n      // );\n    }\n  }\n}\n\nexport default App;\n\n// The stream needs to be passed attributes\n// <Stream\n//    stream={{image:\"\" name:\"\" game:\"\" viewers:\"\" description:\"\"}}\n// />\n\n// Info above is usually coming from a JSON file, so passing it as a single prop (in this case \"stream\") is useful\n\n// Take an array of raw data and turn it into a number of components (1:41 in video)\n// const nums = [1, 2, 3, 4, 5]\n// const doubled = nums.map(function(num) {      function receives each individual number in the array\n//  return num*2                                  map function creates new array\n// })\n\n// streamData.js is a file\n// function App {\n// const streamComponents = streamData.map(stream => {      // returns an array of stream components\n//   return (\n//    <Stream key={stream.id} image={stream.image} name={stream.name} game={stream.game} viewers={stream.viewers} description={stream.description}/>\n//   )\n// })\n//\n// return (\n//   <div>\n//     {streamComponents}\n//   </div>\n// )\n// export default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}