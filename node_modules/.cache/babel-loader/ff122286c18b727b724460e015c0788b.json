{"ast":null,"code":"import _regeneratorRuntime from \"/Users/russellscharf/Desktop/twitch-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/russellscharf/Desktop/twitch-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/russellscharf/Desktop/twitch-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/russellscharf/Desktop/twitch-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/russellscharf/Desktop/twitch-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/russellscharf/Desktop/twitch-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/russellscharf/Desktop/twitch-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/russellscharf/Desktop/twitch-app/src/App.js\";\nimport React, { Component } from \"react\";\nimport \"./App.css\";\nimport { Button } from \"react-bootstrap\";\nimport Header from \"./MyHeader\";\nimport SearchBar from \"./MySearchBar\";\nimport Stream from \"./MyStream\"; // import Background from \"./MyBackground\";\n\nvar APIid = \"2x21yf8b7p6a6z6agpbc4cdsf0cy8d\";\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this));\n    _this.state = {\n      loading: false,\n      items: []\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var _this2 = this;\n\n        var test_access_token;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.setState({\n                  loading: true\n                });\n\n                test_access_token = function test_access_token() {\n                  var response = fetch(\"https://api.twitch.tv/kraken/streams/\", {\n                    headers: {\n                      \"Client-Id\": APIid\n                    }\n                  });\n                  var data = response.json();\n\n                  _this2.setState({\n                    items: data.streams[0]\n                  });\n\n                  console.log(data.streams[0]); // .then(res => res.json())\n                  // .then(json => {\n                  //   this.setState({\n                  //     loading: false,\n                  //     items: json\n                  //   });\n                  //   console.log(\"response: \", json);\n                  //   console.log(\"Index zero game: \", json.streams[0].game);\n                  // });\n                };\n\n                test_access_token();\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          loading = _this$state.loading,\n          items = _this$state.items;\n\n      if (loading) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 47\n          },\n          __self: this\n        }, \"Loading...\");\n      } else {\n        return React.createElement(\"div\", {\n          className: \"box\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 50\n          },\n          __self: this\n        }, React.createElement(Header, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 51\n          },\n          __self: this\n        }), React.createElement(SearchBar, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 52\n          },\n          __self: this\n        }), React.createElement(Stream, {\n          stream: {\n            image: \"test\",\n            name: \"test\",\n            game: \"test\",\n            viewers: \"test\",\n            description: \"test\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 53\n          },\n          __self: this\n        }), React.createElement(Button, {\n          bsstyle: \"success\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 62\n          },\n          __self: this\n        }, \"Test\"));\n      }\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App; // The stream needs to be passed attributes\n// <Stream\n//    stream={{image:\"\" name:\"\" game:\"\" viewers:\"\" description:\"\"}}\n// />\n// Info above is usually coming from a JSON file, so passing it as a single prop (in this case \"stream\") is useful\n// Take an array of raw data and turn it into a number of components (1:41 in video)\n// const nums = [1, 2, 3, 4, 5]\n// const doubled = nums.map(function(num) {      function receives each individual number in the array\n//  return num*2                                  map function creates new array\n// })\n// streamData.js is a file\n// function App {\n// const streamComponents = streamData.map(stream => {      // returns an array of stream components\n//   return (\n//    <Stream key={stream.id} image={stream.image} name={stream.name} game={stream.game} viewers={stream.viewers} description={stream.description}/>\n//   )\n// })\n//\n// return (\n//   <div>\n//     {streamComponents}\n//   </div>\n// )\n// export default App","map":{"version":3,"sources":["/Users/russellscharf/Desktop/twitch-app/src/App.js"],"names":["React","Component","Button","Header","SearchBar","Stream","APIid","App","state","loading","items","setState","test_access_token","response","fetch","headers","data","json","streams","console","log","image","name","game","viewers","description"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,WAAP;AACA,SAASC,MAAT,QAAuB,iBAAvB;AAEA,OAAOC,MAAP,MAAmB,YAAnB;AACA,OAAOC,SAAP,MAAsB,eAAtB;AACA,OAAOC,MAAP,MAAmB,YAAnB,C,CACA;;AACA,IAAIC,KAAK,GAAG,gCAAZ;;IAEMC,G;;;;;AACJ,iBAAc;AAAA;;AAAA;;AACZ;AACA,UAAKC,KAAL,GAAa;AACXC,MAAAA,OAAO,EAAE,KADE;AAEXC,MAAAA,KAAK,EAAE;AAFI,KAAb;AAFY;AAMb;;;;;;;;;;;;;;;AAGC,qBAAKC,QAAL,CAAc;AAAEF,kBAAAA,OAAO,EAAE;AAAX,iBAAd;;AACMG,gBAAAA,iB,GAAoB,SAApBA,iBAAoB,GAAM;AAC9B,sBAAMC,QAAQ,GAAGC,KAAK,CAAC,uCAAD,EAA0C;AAC9DC,oBAAAA,OAAO,EAAE;AACP,mCAAaT;AADN;AADqD,mBAA1C,CAAtB;AAKA,sBAAMU,IAAI,GAAGH,QAAQ,CAACI,IAAT,EAAb;;AACA,kBAAA,MAAI,CAACN,QAAL,CAAc;AAAED,oBAAAA,KAAK,EAAEM,IAAI,CAACE,OAAL,CAAa,CAAb;AAAT,mBAAd;;AACAC,kBAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAI,CAACE,OAAL,CAAa,CAAb,CAAZ,EAR8B,CAS9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,iB;;AACDN,gBAAAA,iBAAiB;;;;;;;;;;;;;;;;;;6BAGV;AAAA,wBACkB,KAAKJ,KADvB;AAAA,UACDC,OADC,eACDA,OADC;AAAA,UACQC,KADR,eACQA,KADR;;AAEP,UAAID,OAAJ,EAAa;AACX,eAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAP;AACD,OAFD,MAEO;AACL,eACE;AAAK,UAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF,EAEE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAFF,EAGE,oBAAC,MAAD;AACE,UAAA,MAAM,EAAE;AACNY,YAAAA,KAAK,EAAE,MADD;AAENC,YAAAA,IAAI,EAAE,MAFA;AAGNC,YAAAA,IAAI,EAAE,MAHA;AAINC,YAAAA,OAAO,EAAE,MAJH;AAKNC,YAAAA,WAAW,EAAE;AALP,WADV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAHF,EAYE,oBAAC,MAAD;AAAQ,UAAA,OAAO,EAAC,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAZF,CADF;AAgBD;AACF;;;;EAvDexB,S;;AA0DlB,eAAeM,GAAf,C,CAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { Button } from \"react-bootstrap\";\n\nimport Header from \"./MyHeader\";\nimport SearchBar from \"./MySearchBar\";\nimport Stream from \"./MyStream\";\n// import Background from \"./MyBackground\";\nvar APIid = \"2x21yf8b7p6a6z6agpbc4cdsf0cy8d\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      loading: false,\n      items: []\n    };\n  }\n\n  async componentDidMount() {\n    this.setState({ loading: true });\n    const test_access_token = () => {\n      const response = fetch(\"https://api.twitch.tv/kraken/streams/\", {\n        headers: {\n          \"Client-Id\": APIid\n        }\n      });\n      const data = response.json();\n      this.setState({ items: data.streams[0] });\n      console.log(data.streams[0]);\n      // .then(res => res.json())\n      // .then(json => {\n      //   this.setState({\n      //     loading: false,\n      //     items: json\n      //   });\n      //   console.log(\"response: \", json);\n      //   console.log(\"Index zero game: \", json.streams[0].game);\n      // });\n    };\n    test_access_token();\n  }\n\n  render() {\n    var { loading, items } = this.state;\n    if (loading) {\n      return <div>Loading...</div>;\n    } else {\n      return (\n        <div className=\"box\">\n          <Header />\n          <SearchBar />\n          <Stream\n            stream={{\n              image: \"test\",\n              name: \"test\",\n              game: \"test\",\n              viewers: \"test\",\n              description: \"test\"\n            }}\n          />\n          <Button bsstyle=\"success\">Test</Button>\n        </div>\n      );\n    }\n  }\n}\n\nexport default App;\n\n// The stream needs to be passed attributes\n// <Stream\n//    stream={{image:\"\" name:\"\" game:\"\" viewers:\"\" description:\"\"}}\n// />\n\n// Info above is usually coming from a JSON file, so passing it as a single prop (in this case \"stream\") is useful\n\n// Take an array of raw data and turn it into a number of components (1:41 in video)\n// const nums = [1, 2, 3, 4, 5]\n// const doubled = nums.map(function(num) {      function receives each individual number in the array\n//  return num*2                                  map function creates new array\n// })\n\n// streamData.js is a file\n// function App {\n// const streamComponents = streamData.map(stream => {      // returns an array of stream components\n//   return (\n//    <Stream key={stream.id} image={stream.image} name={stream.name} game={stream.game} viewers={stream.viewers} description={stream.description}/>\n//   )\n// })\n//\n// return (\n//   <div>\n//     {streamComponents}\n//   </div>\n// )\n// export default App\n"]},"metadata":{},"sourceType":"module"}