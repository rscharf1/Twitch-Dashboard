{"version":3,"sources":["MyHeader.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","Component","APIid","url","newID","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","search","bind","assertThisInitialized","changeURL","fetchData","componentDidMount","render","state","items","loading","e","preventDefault","console","log","newSearch","document","getElementById","value","fetch","headers","Client-Id","then","res","json","response","data","i","name","id","window","setTimeout","length","_this2","setState","user_name","_this3","className","MyHeader","onSubmit","input","onChange","type","placeholder","Button","onClick","map","item","key","src","language","alt","viewer_count","title","Boolean","location","hostname","match","ReactDOM","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.aec72b1f.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass Header extends Component {\n  render() {\n    return <h2>Twitch Dashboard</h2>;\n  }\n}\n\nexport default Header;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { Button } from \"react-bootstrap\";\n\nimport Header from \"./MyHeader\";\nvar APIid = \"2x21yf8b7p6a6z6agpbc4cdsf0cy8d\";\nvar url = \"https://api.twitch.tv/helix/streams?\"; // comment out?\n// var myURL = \"https://api.twitch.tv/helix/streams?\";\nvar newID = \"\";\n\n// https://api.twitch.tv/helix/streams?\n// https://api.twitch.tv/kraken/streams/\n// https://api.twitch.tv/helix/streams?game_id=33214\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.search = this.search.bind(this);\n    this.changeURL = this.changeURL.bind(this);\n    this.fetchData = this.fetchData.bind(this);\n    this.componentDidMount = this.componentDidMount.bind(this);\n    this.render = this.render.bind(this);\n    this.state = {\n      items: [],\n      loading: false\n      // url: \"https://api.twitch.tv/helix/streams?\"\n    };\n  }\n\n  search(e) {\n    // name of game has been entered\n    e.preventDefault();\n    console.log(\"running search method\");\n    const newSearch = document.getElementById(\"game-search\").value;\n    console.log(\"newSearch: \", newSearch);\n    const test_access_token = () => {\n      fetch(\"https://api.twitch.tv/helix/games/top\", {\n        headers: {\n          \"Client-Id\": APIid\n        }\n      })\n        .then(res => res.json())\n        .then(response => {\n          console.log(\"new search response: \", response);\n          console.log(\"new search index 0\", response.data[0]);\n          var i = 0;\n          for (i = 0; i <= 18; i++) {\n            if (newSearch === response.data[i].name) {\n              newID = response.data[i].id;\n              console.log(newID);\n              console.log(\"Found game id \");\n            }\n          }\n        });\n    };\n    test_access_token();\n    console.log(\"end of new search\");\n    window.setTimeout(this.changeURL, 1000);\n  }\n\n  changeURL() {\n    console.log(\"NewID\", newID);\n    if (newID.length > 1) {\n      url = url + \"game_id=\" + newID;\n      console.log(\"url: \", url);\n    }\n    this.fetchData();\n  }\n\n  fetchData() {\n    console.log(\"fetchData\");\n    console.log(url);\n    this.setState({ loading: true });\n    const test_access_token = () => {\n      fetch(url, {\n        headers: {\n          \"Client-Id\": APIid\n        }\n      })\n        .then(res => res.json())\n        .then(json => {\n          this.setState({\n            items: json.data,\n            loading: false\n          });\n          console.log(\"new data json response: \", json);\n          console.log(\"new data this.state response: \", this.state);\n          console.log(\n            \"new data index zero name: \",\n            this.state.items[0].user_name\n          );\n        });\n    };\n    test_access_token();\n    this.setState({});\n  }\n\n  componentDidMount() {\n    console.log(\"componentDidMount\");\n    console.log(url);\n    this.setState({ loading: true });\n    const test_access_token = () => {\n      fetch(url, {\n        headers: {\n          \"Client-Id\": APIid\n        }\n      })\n        .then(res => res.json())\n        .then(json => {\n          this.setState({\n            items: json.data,\n            loading: false\n          });\n          console.log(\"json response: \", json);\n          console.log(\"this.state response: \", this.state);\n          console.log(\"Index zero name: \", this.state.items[0].user_name);\n        });\n    };\n    test_access_token();\n  }\n\n  render() {\n    console.log(\"rendering\");\n    var { loading } = this.state;\n    if (loading) {\n      return <div>Loading...</div>;\n    } else {\n      return (\n        <div className=\"box\" id=\"myBox\">\n          <Header />\n          {/* <SearchBar /> */}\n          <form id=\"search-form\" onSubmit={this.search}>\n            <input\n              id=\"game-search\"\n              value={this.props.input}\n              onChange={this.props.onChange}\n              type=\"text\"\n              placeholder=\"Search Game...\"\n            />\n            <Button className=\"btn-sm\" id=\"new-submit\" onClick={this.search}>\n              Go\n            </Button>\n          </form>\n          <div>\n            {this.state.items.map((item, i) => (\n              <div key={i} className=\"stream container\">\n                <div className=\"row\">\n                  <div className=\"stream-image col-sm-4\">\n                    <img src={item.language} alt=\"\" />\n                    {/* Thumbnail image */}\n                  </div>\n                  <div className=\"stream-info col-sm-7\">\n                    <h5 className=\"name\">{item.user_name}</h5>\n                    <p className=\"game\">\n                      {/* Playing {item.} */}\n                      {/* Not working  */}\n                    </p>\n                    <p className=\"viewers\">Viewers: {item.viewer_count}</p>\n                    <p className=\"description\">Description: {item.title}</p>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      );\n    }\n  }\n}\n\nexport default App;\n\n// Thumbnail picture\n// Playing....\n// Search\n// When user enters a search, a function must run to change \"url\" variable and then refresh the whole app\n// Map entered game with game id?\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}